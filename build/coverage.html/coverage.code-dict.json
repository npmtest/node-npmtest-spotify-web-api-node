{"/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/test.js":"/* istanbul instrument in package npmtest_spotify_web_api_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/lib.npmtest_spotify_web_api_node.js":"/* istanbul instrument in package npmtest_spotify_web_api_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_spotify_web_api_node = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_spotify_web_api_node = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-spotify-web-api-node && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_spotify_web_api_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_spotify_web_api_node\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_spotify_web_api_node.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_spotify_web_api_node.rollup.js'] =\n            local.assetsDict['/assets.npmtest_spotify_web_api_node.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_spotify_web_api_node.__dirname + '/lib.npmtest_spotify_web_api_node.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/node_modules/spotify-web-api-node/src/server.js":"var SpotifyWebApi = require('./spotify-web-api');\nvar ServerMethods = require('./server-methods');\nSpotifyWebApi._addMethods(ServerMethods);\nmodule.exports = SpotifyWebApi;\n","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/node_modules/spotify-web-api-node/src/spotify-web-api.js":"'use strict';\n\nvar AuthenticationRequest = require('./authentication-request'),\n    WebApiRequest = require('./webapi-request'),\n    HttpManager = require('./http-manager');\n\nfunction SpotifyWebApi(credentials) {\n  this._credentials = credentials || {};\n}\n\nSpotifyWebApi.prototype = {\n  _addBodyParameters: function(request, options) {\n    if (options) {\n      for (var key in options) {\n        if (key !== 'credentials') {\n          request.addBodyParameter(key, options[key]);\n        }\n      }\n    }\n  },\n\n  _addQueryParameters: function(request, options) {\n    if (!options) {\n      return;\n    }\n    for (var key in options) {\n      if (key !== 'credentials') {\n        request.addQueryParameter(key, options[key]);\n      }\n    }\n  },\n\n  _performRequest: function(method, request) {\n    var promiseFunction = function(resolve, reject) {\n      method(request, function(error, result) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n    };\n    return new Promise(promiseFunction);\n  },\n\n  _addAccessToken: function(request, accessToken) {\n    if (accessToken) {\n      request.addHeaders({\n        'Authorization' : 'Bearer ' + accessToken\n      });\n    }\n  },\n\n  setCredentials: function(credentials) {\n    for (var key in credentials) {\n      if (credentials.hasOwnProperty(key)) {\n        this._credentials[key] = credentials[key];\n      }\n    }\n  },\n\n  getCredentials: function() {\n    return this._credentials;\n  },\n\n  resetCredentials: function() {\n    this._credentials = null;\n  },\n\n  setClientId: function(clientId) {\n    this._setCredential('clientId', clientId);\n  },\n\n  setClientSecret: function(clientSecret) {\n    this._setCredential('clientSecret', clientSecret);\n  },\n\n  setAccessToken: function(accessToken) {\n    this._setCredential('accessToken', accessToken);\n  },\n\n  setRefreshToken: function(refreshToken) {\n    this._setCredential('refreshToken', refreshToken);\n  },\n\n  setRedirectURI: function(redirectUri) {\n    this._setCredential('redirectUri', redirectUri);\n  },\n\n  getRedirectURI: function() {\n    return this._getCredential('redirectUri');\n  },\n\n  getClientId: function() {\n    return this._getCredential('clientId');\n  },\n\n  getClientSecret: function() {\n    return this._getCredential('clientSecret');\n  },\n\n  getAccessToken: function() {\n    return this._getCredential('accessToken');\n  },\n\n  getRefreshToken: function() {\n    return this._getCredential('refreshToken');\n  },\n\n  resetClientId: function() {\n    this._resetCredential('clientId');\n  },\n\n  resetClientSecret: function() {\n    this._resetCredential('clientSecret');\n  },\n\n  resetAccessToken: function() {\n    this._resetCredential('accessToken');\n  },\n\n  resetRefreshToken: function() {\n    this._resetCredential('refreshToken');\n  },\n\n  resetRedirectURI: function() {\n    this._resetCredential('redirectUri');\n  },\n\n  _setCredential: function(credentialKey, value) {\n    this._credentials = this._credentials || {};\n    this._credentials[credentialKey] = value;\n  },\n\n  _getCredential: function(credentialKey) {\n    if (!this._credentials) {\n      return;\n    } else {\n      return this._credentials[credentialKey];\n    }\n  },\n\n  _resetCredential: function(credentialKey) {\n    if (!this._credentials) {\n      return;\n    } else {\n      this._credentials[credentialKey] = null;\n    }\n  },\n\n  /**\n   * Look up a track.\n   * @param {string} trackId The track's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getTrack('3Qm86XLflmIXVm1wcwkgDK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the track. Not returned if a callback is given.\n   */\n  getTrack: function(trackId, options, callback) {\n     // In case someone is using a version where options parameter did not exist.\n    var actualCallback;\n    if (typeof options === 'function') {\n      actualCallback = options;\n    } else {\n      actualCallback = callback;\n    }\n\n    var actualOptions = {};\n    if (typeof options === 'object') {\n      Object.keys(options).forEach(function(key) {\n        actualOptions[key] = options[key];\n      });\n    }\n\n    var request = WebApiRequest.builder()\n      .withPath('/v1/tracks/' + trackId)\n      .withQueryParameters(actualOptions)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (actualCallback) {\n      promise.then(function(data) {\n        actualCallback(null, data);\n      }, function(err) {\n        actualCallback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Look up several tracks.\n   * @param {string[]} trackIds The IDs of the artists.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */\n  getTracks: function(trackIds, options, callback) {\n    // In case someone is using a version where options parameter did not exist.\n    var actualCallback;\n    if (typeof options === 'function') {\n      actualCallback = options;\n    } else {\n      actualCallback = callback;\n    }\n\n    var actualOptions = {};\n    if (typeof options === 'object') {\n      Object.keys(options).forEach(function(key) {\n        actualOptions[key] = options[key];\n      });\n    }\n\n    var request = WebApiRequest.builder()\n      .withPath('/v1/tracks')\n      .withQueryParameters({\n        'ids' : trackIds.join(',')\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, actualOptions);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (actualCallback) {\n      promise.then(function(data) {\n        actualCallback(null, data);\n      }, function(err) {\n        actualCallback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Look up an album.\n   * @param {string} albumId The album's ID.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbum('0sNOF9WDwhWunNAHPD3Baj').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the album. Not returned if a callback is given.\n   */\n  getAlbum: function(albumId, options, callback) {\n    // In case someone is using a version where options parameter did not exist.\n    var actualCallback;\n    if (typeof options === 'function') {\n      actualCallback = options;\n    } else {\n      actualCallback = callback;\n    }\n\n    var actualOptions = {};\n    if (typeof options === 'object') {\n      Object.keys(options).forEach(function(key) {\n        actualOptions[key] = options[key];\n      });\n    }\n\n    var request = WebApiRequest.builder()\n      .withPath('/v1/albums/' + albumId)\n      .withQueryParameters(actualOptions)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (actualCallback) {\n      promise.then(function(data) {\n        actualCallback(null, data);\n      }, function(err) {\n        actualCallback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Look up several albums.\n   * @param {string[]} albumIds The IDs of the albums.\n   * @param {Object} [options] The possible options, currently only market.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbums(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the albums. Not returned if a callback is given.\n   */\n  getAlbums: function(albumIds, options, callback) {\n    // In case someone is using a version where options parameter did not exist.\n    var actualCallback;\n    if (typeof options === 'function') {\n      actualCallback = options;\n    } else {\n      actualCallback = callback;\n    }\n\n    var actualOptions = {};\n    if (typeof options === 'object') {\n      Object.keys(options).forEach(function(key) {\n        actualOptions[key] = options[key];\n      });\n    }\n\n    var request = WebApiRequest.builder()\n      .withPath('/v1/albums')\n      .withQueryParameters({\n        'ids' : albumIds.join(',')\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, actualOptions);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (actualCallback) {\n      promise.then(function(data) {\n        actualCallback(null, data);\n      }, function(err) {\n        actualCallback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Look up an artist.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example api.getArtist('1u7kkVrr14iBvrpYnZILJR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artist. Not returned if a callback is given.\n   */\n  getArtist: function(artistId, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/artists/' + artistId)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Look up several artists.\n   * @param {string[]} artistIds The IDs of the artists.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtists(['0oSGxfWSnnOXhD2fKuz2Gy', '3dBVyJ7JuOMt4GE9607Qin']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing information\n   *          about the artists. Not returned if a callback is given.\n   */\n  getArtists: function(artistIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/artists')\n      .withQueryParameters({\n        'ids' : artistIds.join(',')\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Search for music entities of certain types.\n   * @param {string} query The search query.\n   * @param {string[]} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example search('Abba', ['track', 'playlist'], { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  search: function(query, types, options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/search/')\n      .withQueryParameters({\n        type : types.join(','),\n        q : query\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, options);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Search for an album.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchAlbums('Space Oddity', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchAlbums: function(query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  },\n\n  /**\n   * Search for an artist.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchArtists('David Bowie', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchArtists: function(query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  },\n\n  /**\n   * Search for a track.\n   * @param {string} query The search query.\n   * @param {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchTracks('Mr. Brightside', { limit : 3, offset : 2 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchTracks: function(query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  },\n\n  /**\n   * Search for playlists.\n   * @param {string} query The search query.\n   * @param {Object} options The possible options.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example searchPlaylists('workout', { limit : 1, offset : 0 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          search results. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  searchPlaylists: function(query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  },\n\n  /**\n   * Get an artist's albums.\n   * @param {string} artistId The artist's ID.\n   * @options {Object} [options] The possible options, e.g. limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistAlbums('0oSGxfWSnnOXhD2fKuz2Gy', { album_type : 'album', country : 'GB', limit : 2, offset : 5 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the albums\n   *          for the given artist. The result is paginated. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  getArtistAlbums: function(artistId, options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/artists/' + artistId + '/albums')\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, options);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get the tracks of an album.\n   * @param albumId the album's ID.\n   * @options {Object} [options] The possible options, e.g. limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAlbumTracks('41MnTivkwTO3UUJ8DrqEJJ', { limit : 5, offset : 1 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *                    tracks in the album. The result is paginated. If the promise is rejected.\n   *                    it contains an error object. Not returned if a callback is given.\n   */\n  getAlbumTracks: function(albumId, options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/albums/' + albumId + '/tracks')\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, options);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get an artist's top tracks.\n   * @param {string} artistId The artist's ID.\n   * @param {string} country The country/territory where the tracks are most popular. (format: ISO 3166-1 alpha-2)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistTopTracks('0oSGxfWSnnOXhD2fKuz2Gy', 'GB').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          artist's top tracks in the given country. If the promise is rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  getArtistTopTracks: function(artistId, country, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/artists/' + artistId + '/top-tracks')\n      .withQueryParameters({\n        'country' : country\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get related artists.\n   * @param {string} artistId The artist's ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getArtistRelatedArtists('0oSGxfWSnnOXhD2fKuz2Gy').then(...)\n   * @returns {Promise|undefined} A promise that if successful, returns an object containing the\n   *          related artists. If the promise is rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getArtistRelatedArtists: function(artistId, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/artists/' + artistId + '/related-artists')\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get information about a user.\n   * @param userId The user ID.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUser('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getUser: function(userId, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/users/' + encodeURIComponent(userId))\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get information about the user that has signed in (the current user).\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getMe().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the user. The amount of information\n   *          depends on the permissions given by the user. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getMe: function(callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me')\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get a user's playlists.\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getUserPlaylists('thelinmichael').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of playlists. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getUserPlaylists: function(userId, options, callback) {\n    var path;\n    if (typeof userId === 'string') {\n      path = '/v1/users/' + encodeURIComponent(userId) + '/playlists';\n    } else {\n      path = '/v1/me/playlists';\n    }\n\n    var request = WebApiRequest.builder()\n      .withPath(path)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, options);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get a playlist.\n   * @param {string} userId The playlist's owner's user ID.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylist('thelinmichael', '3EsfV6XzCHU8SPNdbnFogK').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getPlaylist: function(userId, playlistId, options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, options);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get tracks in a playlist.\n   * @param {string} userId THe playlist's owner's user ID.\n   * @param {string} playlistId The playlist's ID.\n   * @param {Object} [options] Optional options, such as fields.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getPlaylistTracks('thelinmichael', '3ktAYNcRHpazJ9qecm3ptn').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object that containing\n   * the tracks in the playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getPlaylistTracks: function(userId, playlistId, options, callback) {\n    var request = WebApiRequest.builder().\n      withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks').\n      withQueryParameters(options).\n      build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Create a playlist.\n   * @param {string} userId The playlist's owner's user ID.\n   * @param {string} playlistName The name of the playlist.\n   * @param {Object} [options] The possible options, currently only public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example createPlaylist('thelinmichael', 'My cool playlist!', { public : false }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing information about the\n   *          created playlist. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  createPlaylist: function(userId, playlistName, options, callback) {\n    // In case someone is using a version where options parameter did not exist.\n    var actualCallback;\n    if (typeof options === 'function') {\n      actualCallback = options;\n    } else {\n      actualCallback = callback;\n    }\n\n    var actualOptions = { 'name' : playlistName };\n    if (typeof options === 'object') {\n      Object.keys(options).forEach(function(key) {\n        actualOptions[key] = options[key];\n      });\n    }\n\n    var request = WebApiRequest.builder()\n      .withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withBodyParameters(actualOptions)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.post, request);\n\n    if (actualCallback) {\n      promise.then(function(data) {\n        actualCallback(null, data);\n      }, function(err) {\n        actualCallback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Follow a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, currently only public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  followPlaylist: function(userId, playlistId, options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/followers')\n      .withBodyParameters(options)\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.put, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Unfollow a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, currently only public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  unfollowPlaylist: function(userId, playlistId, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/followers')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.del, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Change playlist details.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {Object} [options] The possible options, e.g. name, public.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example changePlaylistDetails('thelinmichael', '3EsfV6XzCHU8SPNdbnFogK', {name: 'New name', public: true}).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  changePlaylistDetails: function(userId, playlistId, options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId)\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withBodyParameters(options)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.put, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Add tracks to a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {string[]} tracks URIs of the tracks to add to the playlist.\n   * @param {Object} [options] Options, position being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example addTracksToPlaylist('thelinmichael', '3EsfV6XzCHU8SPNdbnFogK',\n              '[\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]').then(...)\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  addTracksToPlaylist: function(userId, playlistId, tracks, options, callback) {\n    var tracksString;\n    if (typeof tracks === 'object') {\n      tracksString = tracks.join();\n    } else {\n      tracksString = tracks;\n    }\n    var request = WebApiRequest.builder()\n      .withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withQueryParameters({\n        uris: tracksString\n      })\n      .build();\n\n    this._addQueryParameters(request, options);\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.post, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Remove tracks from a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} tracks An array of objects containing a property called uri with the track URI (String), and\n   * a an optional property called positions (int[]), e.g. { uri : \"spotify:track:491rM2JN8KvmV6p0oDDuJT\", positions : [0, 15] }\n   * @param {Object} options Options, snapshot_id being the only one.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  removeTracksFromPlaylist: function(userId, playlistId, tracks, options, callback) {\n    var request = WebApiRequest.builder().\n      withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks').\n      withHeaders({ 'Content-Type' : 'application/json' }).\n      withBodyParameters({\n        'tracks': tracks\n      }).\n      build();\n\n    this._addBodyParameters(request, options);\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.del, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Remove tracks from a playlist by position instead of specifying the tracks' URIs.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {int[]} positions The positions of the tracks in the playlist that should be removed\n   * @param {string} snapshot_id The snapshot ID, or version, of the playlist. Required\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  removeTracksFromPlaylistByPosition: function(userId, playlistId, positions, snapshotId, callback) {\n    var request = WebApiRequest.builder().\n      withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks').\n      withHeaders({ 'Content-Type' : 'application/json' }).\n      withBodyParameters({\n        'positions': positions,\n        'snapshot_id' : snapshotId\n      }).\n      build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.del, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Replace tracks in a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {Object[]} uris An array of track URIs (strings)\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an empty object. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  replaceTracksInPlaylist: function(userId, playlistId, uris, callback) {\n    var request = WebApiRequest.builder().\n      withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks').\n      withHeaders({ 'Content-Type' : 'application/json' }).\n      withBodyParameters({\n        'uris': uris\n      }).\n      build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.put, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Reorder tracks in a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {int} rangeStart The position of the first track to be reordered.\n   * @param {int} insertBefore The position where the tracks should be inserted.\n   * @param {Object} options Optional parameters, i.e. range_length and snapshot_id.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an object containing a snapshot_id. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  reorderTracksInPlaylist: function(userId, playlistId, rangeStart, insertBefore, options, callback) {\n    var request = WebApiRequest.builder().\n      withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/tracks').\n      withHeaders({ 'Content-Type' : 'application/json' }).\n      withBodyParameters({\n        'range_start': rangeStart,\n        'insert_before' : insertBefore\n      }).\n      build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addBodyParameters(request, options);\n\n    var promise =  this._performRequest(HttpManager.put, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioFeaturesForTrack: function(trackId, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/audio-features/' + trackId)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * @param {string} trackId The track ID\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioAnalysisForTrack('38P3Q4QcdjQALGF2Z92BmR').then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio analysis. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioAnalysisForTrack: function(trackId, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/audio-analysis/' + trackId)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get audio features for multiple tracks identified by their unique Spotify ID.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAudioFeaturesForTracks(['38P3Q4QcdjQALGF2Z92BmR', '2HO2bnoMrpnZUbUqiilLHi']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object\n   *          containing information about the audio features for the tracks. If the promise is\n   *          rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAudioFeaturesForTracks: function(trackIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/audio-features')\n      .withQueryParameters({\n        'ids' : trackIds.join(',')\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * @param {Object} [options] The options supplied to this request.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getRecommendations({ min_energy: 0.4, seed_artists: ['6mfK6Q2tzLMEchAr0e9Uzu', '4DYFVNKZ1uixa6SQTvzQwJ'], min_popularity: 50 }).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of tracks and a list of seeds. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getRecommendations: function(options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/recommendations')\n      .build();\n\n    var _opts = {};\n    var optionsOfTypeArray = ['seed_artists', 'seed_genres', 'seed_tracks'];\n    for (var option in options) {\n      if (options.hasOwnProperty(option)) {\n        if (optionsOfTypeArray.indexOf(option) !== -1 &&\n          Object.prototype.toString.call(options[option]) === '[object Array]') {\n          _opts[option] = options[option].join(',');\n        } else {\n          _opts[option] = options[option];\n        }\n      }\n    }\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, _opts);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example getAvailableGenreSeeds().then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing\n   *          a list of available genres to be used as seeds for recommendations.\n   *          If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  getAvailableGenreSeeds: function(callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/recommendations/available-genre-seeds')\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Retrieve a URL where the user can give the application permissions.\n   * @param {string[]} scopes The scopes corresponding to the permissions the application needs.\n   * @param {string} state A parameter that you can use to maintain a value between the request and the callback to redirect_uri.It is useful to prevent CSRF exploits.\n   * @returns {string} The URL where the user can give application permissions.\n   */\n  createAuthorizeURL: function(scopes, state) {\n    var request = AuthenticationRequest.builder()\n      .withPath('/authorize')\n      .withQueryParameters({\n        'client_id' : this.getClientId(),\n        'response_type' : 'code',\n        'redirect_uri' : this.getRedirectURI(),\n        'scope' : scopes.join('%20'),\n        'state' : state\n      })\n      .build();\n\n    return request.getURL();\n  },\n\n  /**\n   * Retrieve the tracks that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist track objects. Not returned if a callback is given.\n   */\n  getMySavedTracks: function(options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/tracks')\n      .withQueryParameters(options)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the track ID in the request.\n   * The boolean value of true indicates that the track is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedTracks: function(trackIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/tracks/contains')\n      .withQueryParameters({\n        'ids' : trackIds.join(',')\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Remove a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedTracks: function(trackIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/tracks')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withBodyParameters(trackIds)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.del, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n   /**\n   * Add a track from the authenticated user's Your Music library.\n   * @param {string[]} trackIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedTracks: function(trackIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/tracks')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withBodyParameters(trackIds)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.put, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Remove an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error.\n   * Not returned if a callback is given.\n   */\n  removeFromMySavedAlbums: function(albumIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/albums')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withBodyParameters(albumIds)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.del, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Add an album from the authenticated user's Your Music library.\n   * @param {string[]} albumIds The track IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns null, otherwise an error. Not returned if a callback is given.\n   */\n  addToMySavedAlbums: function(albumIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/albums')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withBodyParameters(albumIds)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.put, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Retrieve the albums that are saved to the authenticated users Your Music library.\n   * @param {Object} [options] Options, being market, limit, and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which in turn contains\n   *          playlist album objects. Not returned if a callback is given.\n   */\n  getMySavedAlbums: function(options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/albums')\n      .withQueryParameters(options)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user’s “Your Music” library.\n   * @param {string[]} albumIds The album IDs\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   * of the returned array's elements correspond to the album ID in the request.\n   * The boolean value of true indicates that the album is part of the user's library, otherwise false.\n   * Not returned if a callback is given.\n   */\n  containsMySavedAlbums: function(albumIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/albums/contains')\n      .withQueryParameters({\n        'ids' : albumIds.join(',')\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get the current user's top artists based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of artists,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyTopArtists: function(options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/top/artists')\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, options);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get the current user's top tracks based on calculated affinity.\n   * @param {Object} [options] Options, being time_range, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into a paging object of tracks,\n   *          otherwise an error. Not returned if a callback is given.\n   */\n  getMyTopTracks: function(options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/top/tracks')\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, options);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Add the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  followUsers: function(userIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: userIds.join(','),\n        type: 'user'\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.put, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Add the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be followed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example followArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  followArtists: function(artistIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: artistIds.join(','),\n        type: 'artist'\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.put, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Remove the current user as a follower of one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  unfollowUsers: function(userIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: userIds.join(','),\n        type: 'user'\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.del, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Remove the current user as a follower of one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to be unfollowed.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example unfollowArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, simply resolves to an empty object. If rejected,\n   *          it contains an error object. Not returned if a callback is given.\n   */\n  unfollowArtists: function(artistIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/following')\n      .withQueryParameters({\n        ids: artistIds.join(','),\n        type: 'artist'\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.del, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Check to see if the current user is following one or more other Spotify users.\n   * @param {string[]} userIds The IDs of the users to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingUsers(['thelinmichael', 'wizzler']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the users IDs in the request.\n   *          The boolean value of true indicates that the user is following that user, otherwise is not.\n   *          Not returned if a callback is given.\n   */\n  isFollowingUsers: function(userIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/following/contains')\n      .withQueryParameters({\n        ids: userIds.join(','),\n        type: 'user'\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Get the current user's followed artists.\n   * @param {Object} [options] Options, being after and limit.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */\n  getFollowedArtists: function(options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/following')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withQueryParameters({\n        type : 'artist'\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n    this._addQueryParameters(request, options);\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Check if users are following a playlist.\n   * @param {string} userId The playlist's owner's user ID\n   * @param {string} playlistId The playlist's ID\n   * @param {String[]} User IDs of the following users\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful returns an array of booleans. If rejected,\n   * it contains an error object. Not returned if a callback is given.\n   */\n  areFollowingPlaylist: function(userId, playlistId, followerIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/users/' + encodeURIComponent(userId) + '/playlists/' + playlistId + '/followers/contains')\n      .withQueryParameters({\n        ids : followerIds.join(',')\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Check to see if the current user is following one or more artists.\n   * @param {string[]} artistIds The IDs of the artists to check if are followed by the current user.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @example isFollowingArtists(['0LcJLqbBmaGUft1e9Mm8HV', '3gqv1kgivAc92KnUm4elKv']).then(...)\n   * @returns {Promise|undefined} A promise that if successful, resolves into an array of booleans. The order\n   *          of the returned array's elements correspond to the artists IDs in the request.\n   *          The boolean value of true indicates that the user is following that artist, otherwise is not.\n   *          Not returned if a callback is given.\n   */\n  isFollowingArtists: function(artistIds, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/me/following/contains')\n      .withQueryParameters({\n        ids: artistIds.join(','),\n        type: 'artist'\n      })\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Retrieve new releases\n   * @param {Object} [options] Options, being country, limit and/or offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * album objects. Not returned if a callback is given.\n   */\n  getNewReleases: function(options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/browse/new-releases')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withQueryParameters(options)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Retrieve featured playlists\n   * @param {Object} [options] Options, being country, locale, timestamp, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * featured playlists. Not returned if a callback is given.\n   */\n  getFeaturedPlaylists: function(options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/browse/featured-playlists')\n      .withHeaders({ 'Content-Type' : 'application/json' })\n      .withQueryParameters(options)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Retrieve a list of categories used to tag items in Spotify (e.g. in the 'Browse' tab)\n   * @param {Object} [options] Options, being country, locale, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object of categories.\n   * Not returned if a callback is given.\n   */\n  getCategories: function(options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/browse/categories')\n      .withQueryParameters(options)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Retrieve a category.\n   * @param {string} categoryId The id of the category to retrieve.\n   * @param {Object} [options] Options, being country, locale.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a category object.\n   * Not returned if a callback is given.\n   */\n  getCategory: function(categoryId, options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/browse/categories/' + categoryId)\n      .withQueryParameters(options)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Retrieve playlists for a category.\n   * @param {string} categoryId The id of the category to retrieve playlists for.\n   * @param {Object} [options] Options, being country, limit, offset.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to a paging object containing simple playlists.\n   * Not returned if a callback is given.\n   */\n  getPlaylistsForCategory: function(categoryId, options, callback) {\n    var request = WebApiRequest.builder()\n      .withPath('/v1/browse/categories/' + categoryId + '/playlists')\n      .withQueryParameters(options)\n      .build();\n\n    this._addAccessToken(request, this.getAccessToken());\n\n    var promise = this._performRequest(HttpManager.get, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  }\n};\n\nSpotifyWebApi._addMethods = function(methods) {\n  for (var i in methods) {\n    if (methods.hasOwnProperty(i)) {\n      this.prototype[i] = methods[i];\n    }\n  }\n};\n\nmodule.exports = SpotifyWebApi;\n","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/node_modules/spotify-web-api-node/src/authentication-request.js":"'use strict';\n\nvar Request = require('./base-request');\n\nvar DEFAULT_HOST = 'accounts.spotify.com',\n    DEFAULT_PORT = 443,\n    DEFAULT_SCHEME = 'https';\n\nmodule.exports.builder = function() {\n  return Request.builder()\n      .withHost(DEFAULT_HOST)\n      .withPort(DEFAULT_PORT)\n      .withScheme(DEFAULT_SCHEME);\n};","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/node_modules/spotify-web-api-node/src/base-request.js":"'use strict';\n\nvar Request = function(builder) {\n  if (!builder) {\n    throw new Error('No builder supplied to constructor');\n  }\n\n  this.host = builder.host;\n  this.port = builder.port;\n  this.scheme = builder.scheme;\n  this.queryParameters = builder.queryParameters;\n  this.bodyParameters = builder.bodyParameters;\n  this.headers = builder.headers;\n  this.path = builder.path;\n};\n\nRequest.prototype.getHost = function() {\n  return this.host;\n};\n\nRequest.prototype.getPort = function() {\n  return this.port;\n};\n\nRequest.prototype.getScheme = function() {\n  return this.scheme;\n};\n\nRequest.prototype.getPath = function() {\n  return this.path;\n};\n\nRequest.prototype.getQueryParameters = function() {\n  return this.queryParameters;\n};\n\nRequest.prototype.getBodyParameters = function() {\n  return this.bodyParameters;\n};\n\nRequest.prototype.getHeaders = function() {\n  return this.headers;\n};\n\nRequest.prototype.getURI = function() {\n  if (!this.scheme || !this.host || !this.port) {\n    throw new Error('Missing components necessary to construct URI');\n  }\n  var uri = this.scheme + '://' + this.host;\n  if (this.scheme === 'http' && this.port !== 80 ||\n    this.scheme === 'https' && this.port !== 443) {\n    uri += ':' + this.port;\n  }\n  if (this.path) {\n    uri += this.path;\n  }\n  return uri;\n};\n\nRequest.prototype.getURL = function() {\n  var uri = this.getURI();\n  if (this.getQueryParameters()) {\n    return uri + this.getQueryParameterString(this.getQueryParameters());\n  } else {\n    return uri;\n  }\n};\n\nRequest.prototype.addQueryParameters = function(queryParameters) {\n  for (var key in queryParameters) {\n    this.addQueryParameter(key, queryParameters[key]);\n  }\n};\n\nRequest.prototype.addQueryParameter = function(key, value) {\n  if (!this.queryParameters) {\n    this.queryParameters = {};\n  }\n  this.queryParameters[key] = value;\n};\n\nRequest.prototype.addBodyParameters = function(bodyParameters) {\n  for (var key in bodyParameters) {\n    this.addBodyParameter(key, bodyParameters[key]);\n  }\n};\n\nRequest.prototype.addBodyParameter = function(key, value) {\n  if (!this.bodyParameters) {\n    this.bodyParameters = {};\n  }\n  this.bodyParameters[key] = value;\n};\n\nRequest.prototype.addHeaders = function(headers) {\n  if (!this.headers) {\n    this.headers = headers;\n  } else {\n    for (var key in headers) {\n      this.headers[key] = headers[key];\n    }\n  }\n};\n\nRequest.prototype.getQueryParameterString = function() {\n  var queryParameters = this.getQueryParameters();\n  if (!queryParameters) {\n    return;\n  }\n  var queryParameterString = '?';\n  var first = true;\n  for (var key in queryParameters) {\n    if (queryParameters.hasOwnProperty(key)) {\n      if (!first) {\n        queryParameterString += '&';\n      } else {\n        first = false;\n      }\n      queryParameterString += key + '=' + queryParameters[key];\n    }\n  }\n  return queryParameterString;\n};\n\nvar Builder = function() {\n  var host, port, scheme, queryParameters, bodyParameters, headers, jsonBody;\n};\n\nBuilder.prototype.withHost = function(host) {\n  this.host = host;\n  return this;\n};\n\nBuilder.prototype.withPort = function(port) {\n  this.port = port;\n  return this;\n};\n\nBuilder.prototype.withScheme = function(scheme) {\n  this.scheme = scheme;\n  return this;\n};\n\nBuilder.prototype.withQueryParameters = function(queryParameters) {\n  this.queryParameters = queryParameters;\n  return this;\n};\n\nBuilder.prototype.withPath = function(path) {\n  this.path = path;\n  return this;\n};\n\nBuilder.prototype.withBodyParameters = function(bodyParameters) {\n  this.bodyParameters = bodyParameters;\n  return this;\n};\n\nBuilder.prototype.withHeaders = function(headers) {\n  this.headers = headers;\n  return this;\n};\n\nBuilder.prototype.build = function() {\n  return new Request(this);\n};\n\nmodule.exports.builder = function() {\n  return new Builder();\n};\n","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/node_modules/spotify-web-api-node/src/webapi-request.js":"'use strict';\n\nvar Request = require('./base-request');\n\nvar DEFAULT_HOST = 'api.spotify.com',\n    DEFAULT_PORT = 443,\n    DEFAULT_SCHEME = 'https';\n\nmodule.exports.builder = function() {\n  return Request.builder()\n      .withHost(DEFAULT_HOST)\n      .withPort(DEFAULT_PORT)\n      .withScheme(DEFAULT_SCHEME);\n};","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/node_modules/spotify-web-api-node/src/http-manager.js":"'use strict';\n\nvar superagent = require('superagent'),\n    WebApiError = require('./webapi-error');\n\nvar HttpManager = {};\n\n/* Create superagent options from the base request */\nvar _getParametersFromRequest = function(request) {\n\n  var options = {};\n\n  if (request.getQueryParameters()) {\n    options.query = request.getQueryParameters();\n  }\n\n  if (request.getHeaders() &&\n      request.getHeaders()['Content-Type'] === 'application/json') {\n    options.data = JSON.stringify(request.getBodyParameters());\n  } else if (request.getBodyParameters()) {\n    options.data = request.getBodyParameters();\n  }\n\n  if (request.getHeaders()) {\n    options.headers = request.getHeaders();\n  }\n  return options;\n};\n\n/* Create an error object from an error returned from the Web API */\nvar _getErrorObject = function(defaultMessage, err) {\n  var errorObject;\n  if (typeof err.error === 'object' && typeof err.error.message === 'string') {\n    // Web API Error format\n    errorObject = new WebApiError(err.error.message, err.error.status);\n  } else if (typeof err.error === 'string') {\n    // Authorization Error format\n    /* jshint ignore:start */\n    errorObject = new WebApiError(err.error + ': ' + err['error_description']);\n    /* jshint ignore:end */\n  } else if (typeof err === 'string') {\n    // Serialized JSON error\n    try {\n      var parsedError = JSON.parse(err);\n      errorObject = new WebApiError(parsedError.error.message, parsedError.error.status);\n    } catch (err) {\n      // Error not JSON formatted\n    }\n  }\n\n  if(!errorObject) {\n    // Unexpected format\n    errorObject = new WebApiError(defaultMessage + ': ' + JSON.stringify(err));\n  }\n\n  return errorObject;\n};\n\n/* Make the request to the Web API */\nHttpManager._makeRequest = function(method, options, uri, callback) {\n  var req = method(uri);\n\n  if (options.query) {\n    req.query(options.query);\n  }\n\n  if (options.data && (!options.headers || options.headers['Content-Type'] !== 'application/json')) {\n    req.type('form');\n    req.send(options.data);\n  } else if (options.data) {\n    req.send(options.data);\n  }\n\n  if (options.headers) {\n    req.set(options.headers);\n  }\n\n  req.end(function (err, response) {\n    if (err) {\n      var errorObject = _getErrorObject('Request error', {\n        error: err\n      });\n      return callback(errorObject);\n    }\n\n    return callback(null, {\n      body: response.body,\n      headers: response.headers,\n      statusCode: response.statusCode\n    });\n  });\n};\n\n/**\n * Make a HTTP GET request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.get = function(request, callback) {\n  var options = _getParametersFromRequest(request);\n  var method = superagent.get;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP POST request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.post = function(request, callback) {\n\n  var options = _getParametersFromRequest(request);\n  var method = superagent.post;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP DELETE request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.del = function(request, callback) {\n\n  var options = _getParametersFromRequest(request);\n  var method = superagent.del;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\n/**\n * Make a HTTP PUT request.\n * @param {BaseRequest} The request.\n * @param {Function} The callback function.\n */\nHttpManager.put = function(request, callback) {\n\n  var options = _getParametersFromRequest(request);\n  var method = superagent.put;\n\n  HttpManager._makeRequest(method, options, request.getURI(), callback);\n};\n\nmodule.exports = HttpManager;\n","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/node_modules/spotify-web-api-node/src/webapi-error.js":"'use strict';\n\nfunction WebapiError(message, statusCode) {\n  this.name = 'WebapiError';\n  this.message = (message || '');\n  this.statusCode = statusCode;\n}\n\nWebapiError.prototype = Error.prototype;\n\nmodule.exports = WebapiError;","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/node_modules/spotify-web-api-node/src/server-methods.js":"'use strict';\n\nvar AuthenticationRequest = require('./authentication-request');\nvar HttpManager = require('./http-manager');\n\nmodule.exports = {\n  /**\n   * Request an access token using the Client Credentials flow.\n   * Requires that client ID and client secret has been set previous to the call.\n   * @param {Object} options Options.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          token type and time to expiration. If rejected, it contains an error object. Not returned if a callback is given.\n   */\n  clientCredentialsGrant: function(options, callback) {\n    var request = AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        'grant_type' : 'client_credentials'\n      })\n      .withHeaders({\n        Authorization : ('Basic ' + new Buffer(this.getClientId() + ':' + this.getClientSecret()).toString('base64'))\n      })\n      .build();\n\n    this._addBodyParameters(request, options);\n\n    var promise =  this._performRequest(HttpManager.post, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Request an access token using the Authorization Code flow.\n   * Requires that client ID, client secret, and redirect URI has been set previous to the call.\n   * @param {string} code The authorization code returned in the callback in the Authorization Code flow.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves into an object containing the access token,\n   *          refresh token, token type and time to expiration. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */\n  authorizationCodeGrant: function(code, callback) {\n    var request = AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        'grant_type' : 'authorization_code',\n        'redirect_uri' : this.getRedirectURI(),\n        'code' : code,\n        'client_id' : this.getClientId(),\n        'client_secret' : this.getClientSecret()\n      })\n      .build();\n\n    var promise = this._performRequest(HttpManager.post, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  },\n\n  /**\n   * Refresh the access token given that it hasn't expired.\n   * Requires that client ID, client secret and refresh token has been set previous to the call.\n   * @param {requestCallback} [callback] Optional callback method to be called instead of the promise.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing the\n   *          access token, time to expiration and token type. If rejected, it contains an error object.\n   *          Not returned if a callback is given.\n   */\n  refreshAccessToken: function(callback) {\n    var request = AuthenticationRequest.builder()\n      .withPath('/api/token')\n      .withBodyParameters({\n        'grant_type' : 'refresh_token',\n        'refresh_token' : this.getRefreshToken()\n      })\n      .withHeaders({\n        Authorization : ('Basic ' + new Buffer(this.getClientId() + ':' + this.getClientSecret()).toString('base64'))\n      })\n      .build();\n\n    var promise = this._performRequest(HttpManager.post, request);\n\n    if (callback) {\n      promise.then(function(data) {\n        callback(null, data);\n      }, function(err) {\n        callback(err);\n      });\n    } else {\n      return promise;\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-spotify-web-api-node/node_modules/spotify-web-api-node/src/client.js":"module.exports = require('./spotify-web-api');\n"}